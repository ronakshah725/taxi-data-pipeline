scalar DateTime
scalar BigDecimal

type Query {
    # Search API with sorting, filtering, pagination
    searchTrips(
        filter: TripFilter
        sort: TripSort
        page: PageInput = {page: 0, size: 20}
    ): TripPage!

    # Analytics APIs
    paymentAnalytics: PaymentAnalytics
    vendorStats: VendorStats

    # Existing status query
    indexStatus: IndexStatus!
}

# Input Types
input TripFilter {
    vendorId: Int
    paymentType: Int
    minFare: BigDecimal
    maxFare: BigDecimal
    passengerCount: Int
}

input TripSort {
    field: TripSortField!
    direction: SortDirection!
}

input PageInput {
    page: Int!
    size: Int!
}

# Enums
enum TripSortField {
    FARE_AMOUNT
    TRIP_DISTANCE
    TOTAL_AMOUNT
    PASSENGER_COUNT
}

enum SortDirection {
    ASC
    DESC
}

# Result Types
type TripPage {
    content: [Trip!]!
    totalElements: Int!
    totalPages: Int!
    number: Int!
    size: Int!
}

type Trip {
    id: ID!
    vendorId: Int!
    paymentType: Int!
    passengerCount: Int!
    tripDistance: BigDecimal!
    fareAmount: BigDecimal!
    totalAmount: BigDecimal!
    version: Int
    createdAt: DateTime!
    updatedAt: DateTime!
}

# Analytics Types
type PaymentAnalytics {
    paymentTypeCounts: [PaymentTypeCount!]!
    averageFareByPaymentType: [PaymentTypeFare!]!
}

type PaymentTypeCount {
    paymentType: Int!
    count: Int!
    totalRevenue: BigDecimal!
}

type PaymentTypeFare {
    paymentType: Int!
    averageFare: BigDecimal!
}

type VendorStats {
    vendorMetrics: [VendorMetric!]!
}

type VendorMetric {
    vendorId: Int!
    totalTrips: Int!
    averageFare: BigDecimal!
    totalRevenue: BigDecimal!
    averagePassengers: Float!
}

# Existing Status Types
type IndexStatus {
    documentCount: Int!
    lastSyncedAt: DateTime
    lastJobExecution: JobExecution
}

type JobExecution {
    startTime: DateTime
    endTime: DateTime
    status: String!
    exitCode: String!
}